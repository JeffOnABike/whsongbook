#+TITLE: TODOs
#+SUBTITLE: Tasks for development

* Decisions

** Defining song syntax
*** Next steps
**** TODO Write script to convert songs to HTML

*** Reflections
**** [2016-03-31 Thu]
- Put off the LilyPond integration for now. It's a good idea but should not be a priority.
- Move away from the the LaTeX syntax. Since I'm not actually using LaTeX to parse the files, this is just overkill
- Move towards a more pythonic syntax (indentation instead of brackets)
**** [2016-03-28 Mon]
- Currently working with the idea of using LilyPond (LaTeX) syntax as a base
  - The things it does very well
    - Gives a general markup for things like titles and sections and variables
    - Defines a robust note/chord syntax
  - The things it seems to lack
    - A simple way to associate lyrics with chords (as opposed to notes)
    - A simple way to put in placeholders like "(Chorus)"
  - These things are largely provided by Chordii
- I've started building a syntax for the verses based on Chordii
  - Similarities
    - Chords are associated with lyrics with brackets, eg "If []there's no one be[]side you when your []soul em[]barks []"
  - Differences
    - The chords aren't actually written in those brackets. They are written in a separate section above, eg "a:m c e a:m2 g2"
      - This means I have to reference them, which makes it important that the number of chords equal the number of brackets
      - The big benefit is that I can use LilyPond syntax to easily output leadsheets
      - But I realize that I could use that exact same syntax in the bracket, eg "If [a:m]there's no one be[c]side you when your [e]soul em[a:m2]barks [g2]"
        - I don't think anything would be lost there whatsoever, except potentional the ~\break~ markers, which could easily be added separately (say, auto-generated every 4 or 8 bars)
- Next Steps
  - Model the same thing but with chords in the brackets the whole time
  - Write a function that extracts the chords and formats them in LilyPond's ~\chordmode~ syntax
  - Start thinking about how to model song form

** Which brackets to use when
*** Contexts
- Abbreviations (Chorus)
- Backup singing (Be a man!)
- Musical notes (solo)
*** Options
- [
- <
- {
- (

* Dashboard

** TODO Write "about" page
** TODO Change navbar to be fixed
** TODO Make navbar light
** TODO Change fonts
** TODO Create artist pages
** TODO Add genres to TOC
** TODO Clean up CSS
- Remove the extra bits from borrowed templates
** TODO Load all songs into memory on startup
- Add function to __init__.py
*** TODO Test the syntax of all song files
*** TODO Test for suffixes
suffix = {"f": "b", "s": "#"}
suffix[slash_chord[1]]
*** If errors
- Don't render the file
- Write error to log
*** Loading a directory
for file in os.listdir("production"):
try:
songs.append(parse_file(file))
except Exception as e:
log error and move on
** TODO Create script for reformatting word doc
*** Coverting chords
**** Convert WSIWYG chords to LilyPond
**** Decide on symbol to mark chord insertion points (~)
***** Eg
                       Em           B7
When you're ~down and ~troubled, 
              Em       B7       Em
And you ~need a helping ~hand,
**** Recognize a line of chords
- If it contains more than 4 consecutive spaces
**** Name the file
**** Script should output the final file
